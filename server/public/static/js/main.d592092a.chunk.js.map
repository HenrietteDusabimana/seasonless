{"version":3,"sources":["api/game.api.js","App.js","reportWebVitals.js","index.js"],"names":["fetchTotalPlaytime","genre","platform","fetch","then","data","json","fetchTotalPlayers","App","useState","playTimeGames","setPlayTimeGames","playTimeGenre","setPlayTimeGenre","playTimePlatforms","setPlayTimePlatforms","topPlayersGames","setTopPlayersGames","topPlayersGenre","setTopPlayersGenre","topPlayersPlatforms","setTopPlayersPlatforms","useEffect","mounted","className","onSubmit","event","preventDefault","id","value","onChange","e","target","type","placeholder","name","class","scope","map","d","game","platforms","join","totalPlaytime","totalPlayers","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qLAAO,SAASA,EAAT,GAAkD,IAApBC,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SAC1C,OAAOC,MAAM,4DAAD,OACkDF,EADlD,sBACqEC,IAC/EE,MAAK,SAACC,GAAD,OAAUA,EAAKC,UAGjB,SAASC,EAAT,GAAiD,IAApBN,EAAmB,EAAnBA,MAAOC,EAAY,EAAZA,SACzC,OAAOC,MAAM,0DAAD,OACgDF,EADhD,sBACmEC,IAC7EE,MAAK,SAACC,GAAD,OAAUA,EAAKC,U,WCoMTE,MAzMf,WACE,MAA0CC,mBAAS,IAAnD,mBAAOC,EAAP,KAAsBC,EAAtB,KACA,EAA0CF,mBAAS,IAAnD,mBAAOG,EAAP,KAAsBC,EAAtB,KACA,EAAkDJ,mBAAS,IAA3D,mBAAOK,EAAP,KAA0BC,EAA1B,KAEA,EAA8CN,mBAAS,IAAvD,mBAAOO,EAAP,KAAwBC,EAAxB,KACA,EAA8CR,mBAAS,IAAvD,mBAAOS,EAAP,KAAwBC,EAAxB,KACA,EAAsDV,mBAAS,IAA/D,mBAAOW,EAAP,KAA4BC,EAA5B,KA8CA,OA5CAC,qBAAU,WACR,IAAIC,GAAU,EAOd,OANAvB,EAAmB,CACjBC,MAAOW,EACPV,SAAUY,IACTV,MAAK,SAACC,GACHkB,GAASZ,EAAiBN,MAEzB,kBAAOkB,GAAU,KACvB,IAEHD,qBAAU,WACR,IAAIC,GAAU,EAOd,OANAhB,EAAkB,CAChBN,MAAOW,EACPV,SAAUY,IACTV,MAAK,SAACC,GACHkB,GAASN,EAAmBZ,MAE3B,kBAAOkB,GAAU,KACvB,IAyBD,sBAAKC,UAAU,gBAAf,UACE,sBAAMC,SAxBV,SAA2BC,GACzBA,EAAMC,iBAEN3B,EAAmB,CACjBC,MAAOW,EACPV,SAAUY,IACTV,MAAK,SAACC,GACPM,EAAiBN,OAiBkBuB,GAAG,cAAtC,SACE,sBAAKJ,UAAU,WAAf,UACE,qBAAKA,UAAU,QAAf,SACE,mBAAGA,UAAU,sBAAb,qCAEF,qBAAKA,UAAU,QAAf,SACE,uBACEK,MAAOjB,EACPkB,SAAU,SAACC,GAAD,OAAOlB,EAAiBkB,EAAEC,OAAOH,QAC3CI,KAAK,OACLC,YAAY,oBACZN,GAAG,QACHO,KAAK,QACLX,UAAU,eAGd,qBAAKA,UAAU,QAAf,SACE,uBACEK,MAAOf,EACPgB,SAAU,SAACC,GAAD,OAAOhB,EAAqBgB,EAAEC,OAAOH,QAC/CD,GAAG,WACHK,KAAK,OACLC,YAAY,uBACZC,KAAK,WACLX,UAAU,eAGd,qBAAKA,UAAU,QAAf,SACE,wBAAQS,KAAK,SAAST,UAAU,uBAAhC,2BAMN,8BACE,wBAAOY,MAAM,uBAAb,UACE,+BACE,oBAAIC,MAAM,MAAMb,UAAU,sCAA1B,kBAGA,oBAAIa,MAAM,MAAMb,UAAU,sCAA1B,uBAGA,oBAAIa,MAAM,MAAMb,UAAU,sCAA1B,mBAGA,oBAAIa,MAAM,MAAMb,UAAU,sCAA1B,gCAIF,gCAKGd,IACEA,EAAcL,MAAQ,IAAIiC,KAAI,SAACC,GAAD,OAC7B,+BACE,oBAAIf,UAAU,uBAAd,SAAsCe,EAAEC,OAAW,IACnD,oBAAIhB,UAAU,sBAAd,SACGe,EAAEE,UAAUC,KAAK,OAEpB,oBAAIlB,UAAU,sBAAd,SAAqCe,EAAEtC,QAAY,IACnD,oBAAIuB,UAAU,sBAAd,SAAqCe,EAAEI,6BAMnD,oCACE,sBAAMlB,SAnFZ,SAA0BC,GACxBA,EAAMC,iBAENpB,EAAkB,CAChBN,MAAOiB,EACPhB,SAAUkB,IACThB,MAAK,SAACC,GACPY,EAAmBZ,OA4EiBuB,GAAG,cAArC,SACE,sBAAKJ,UAAU,WAAf,UACE,qBAAKA,UAAU,QAAf,SACE,mBAAGA,UAAU,sBAAb,8CAIF,qBAAKA,UAAU,QAAf,SACE,uBACEK,MAAOX,EACPY,SAAU,SAACC,GAAD,OAAOZ,EAAmBY,EAAEC,OAAOH,QAC7CI,KAAK,OACLC,YAAY,oBACZN,GAAG,QACHO,KAAK,QACLX,UAAU,eAGd,qBAAKA,UAAU,QAAf,SACE,uBACEK,MAAOT,EACPU,SAAU,SAACC,GAAD,OAAOV,EAAuBU,EAAEC,OAAOH,QACjDD,GAAG,WACHK,KAAK,OACLC,YAAY,uBACZC,KAAK,WACLX,UAAU,eAGd,qBAAKA,UAAU,QAAf,SACE,wBAAQS,KAAK,SAAST,UAAU,uBAAhC,2BAMN,8BACE,wBAAOY,MAAM,uBAAb,UACE,+BACE,oBAAIC,MAAM,MAAMb,UAAU,sCAA1B,kBAGA,oBAAIa,MAAM,MAAMb,UAAU,sCAA1B,uBAGA,oBAAIa,MAAM,MAAMb,UAAU,sCAA1B,mBAGA,oBAAIa,MAAM,MAAMb,UAAU,sCAA1B,kCAIF,gCAKGR,IACEA,EAAgBX,MAAQ,IAAIiC,KAAI,SAACC,GAAD,OAC/B,+BACE,oBAAIf,UAAU,uBAAd,SAAsCe,EAAEC,OAAW,IACnD,oBAAIhB,UAAU,sBAAd,SACGe,EAAEE,UAAUC,KAAK,OAEpB,oBAAIlB,UAAU,sBAAd,SAAqCe,EAAEtC,QAAY,IACnD,oBAAIuB,UAAU,sBAAd,SAAqCe,EAAEK,mCCtL5CC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB3C,MAAK,YAAkD,IAA/C4C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,K","file":"static/js/main.d592092a.chunk.js","sourcesContent":["export function fetchTotalPlaytime({ genre, platform }) {\r\n  return fetch(\r\n    `http://localhost:8080/games/select_top_by_playtime?genre=${genre}&&platform=${platform}`\r\n  ).then((data) => data.json());\r\n}\r\n\r\nexport function fetchTotalPlayers({ genre, platform }) {\r\n  return fetch(\r\n    `http://localhost:8080/games/select_top_by_player?genre=${genre}&&platform=${platform}`\r\n  ).then((data) => data.json());\r\n}\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport { fetchTotalPlayers, fetchTotalPlaytime } from \"./api/game.api\";\n\nfunction App() {\n  const [playTimeGames, setPlayTimeGames] = useState({});\n  const [playTimeGenre, setPlayTimeGenre] = useState(\"\");\n  const [playTimePlatforms, setPlayTimePlatforms] = useState(\"\");\n\n  const [topPlayersGames, setTopPlayersGames] = useState({});\n  const [topPlayersGenre, setTopPlayersGenre] = useState(\"\");\n  const [topPlayersPlatforms, setTopPlayersPlatforms] = useState(\"\");\n\n  useEffect(() => {\n    let mounted = true;\n    fetchTotalPlaytime({\n      genre: playTimeGenre,\n      platform: playTimePlatforms,\n    }).then((data) => {\n      if (mounted) setPlayTimeGames(data);\n    });\n    return () => (mounted = false);\n  }, []);\n\n  useEffect(() => {\n    let mounted = true;\n    fetchTotalPlayers({\n      genre: playTimeGenre,\n      platform: playTimePlatforms,\n    }).then((data) => {\n      if (mounted) setTopPlayersGames(data);\n    });\n    return () => (mounted = false);\n  }, []);\n\n  function filterForPlayTime(event) {\n    event.preventDefault();\n\n    fetchTotalPlaytime({\n      genre: playTimeGenre,\n      platform: playTimePlatforms,\n    }).then((data) => {\n      setPlayTimeGames(data);\n    });\n  }\n\n  function filterForPlayers(event) {\n    event.preventDefault();\n\n    fetchTotalPlayers({\n      genre: topPlayersGenre,\n      platform: topPlayersPlatforms,\n    }).then((data) => {\n      setTopPlayersGames(data);\n    });\n  }\n\n  return (\n    <div className=\"App container\">\n      <form onSubmit={filterForPlayTime} id=\"search-form\">\n        <div className=\"row mt-5\">\n          <div className=\"col-6\">\n            <p className=\"text24 blue fowe900\">Top games by playtime</p>\n          </div>\n          <div className=\"col-2\">\n            <input\n              value={playTimeGenre}\n              onChange={(e) => setPlayTimeGenre(e.target.value)}\n              type=\"text\"\n              placeholder=\"Search by genre..\"\n              id=\"genre\"\n              name=\"genre\"\n              className=\"my_input\"\n            />\n          </div>\n          <div className=\"col-2\">\n            <input\n              value={playTimePlatforms}\n              onChange={(e) => setPlayTimePlatforms(e.target.value)}\n              id=\"platform\"\n              type=\"text\"\n              placeholder=\"Search by platform..\"\n              name=\"platform\"\n              className=\"my_input\"\n            />\n          </div>\n          <div className=\"col-2\">\n            <button type=\"submit\" className=\"btn btn_primary_blue\">\n              Filter\n            </button>\n          </div>\n        </div>\n      </form>\n      <div>\n        <table class=\"table table-bordered\">\n          <tr>\n            <th scope=\"col\" className=\"text14 black fowe700 text-uppercase\">\n              Game\n            </th>\n            <th scope=\"col\" className=\"text14 black fowe700 text-uppercase\">\n              Platforms\n            </th>\n            <th scope=\"col\" className=\"text14 black fowe700 text-uppercase\">\n              Genre\n            </th>\n            <th scope=\"col\" className=\"text14 black fowe700 text-uppercase\">\n              Total play time\n            </th>\n          </tr>\n          <tbody>\n            {/* <th scope=\"row\" className=\"text12 gray fowe700\">\n                1\n              </th> */}\n\n            {playTimeGames &&\n              (playTimeGames.data || []).map((d) => (\n                <tr>\n                  <td className=\"text14 black fowe700\">{d.game}</td>{\" \"}\n                  <td className=\"text12 gray fowe400\">\n                    {d.platforms.join(\",\")}\n                  </td>\n                  <td className=\"text12 gray fowe400\">{d.genre}</td>{\" \"}\n                  <td className=\"text12 gray fowe400\">{d.totalPlaytime}</td>\n                </tr>\n              ))}\n          </tbody>\n        </table>\n      </div>\n      <section>\n        <form onSubmit={filterForPlayers} id=\"search-form\">\n          <div className=\"row mt-5\">\n            <div className=\"col-6\">\n              <p className=\"text24 blue fowe900\">\n                Top games by number of players\n              </p>\n            </div>\n            <div className=\"col-2\">\n              <input\n                value={topPlayersGenre}\n                onChange={(e) => setTopPlayersGenre(e.target.value)}\n                type=\"text\"\n                placeholder=\"Search by genre..\"\n                id=\"genre\"\n                name=\"genre\"\n                className=\"my_input\"\n              />\n            </div>\n            <div className=\"col-2\">\n              <input\n                value={topPlayersPlatforms}\n                onChange={(e) => setTopPlayersPlatforms(e.target.value)}\n                id=\"platform\"\n                type=\"text\"\n                placeholder=\"Search by platform..\"\n                name=\"platform\"\n                className=\"my_input\"\n              />\n            </div>\n            <div className=\"col-2\">\n              <button type=\"submit\" className=\"btn btn_primary_blue\">\n                Filter\n              </button>\n            </div>\n          </div>\n        </form>\n        <div>\n          <table class=\"table table-bordered\">\n            <tr>\n              <th scope=\"col\" className=\"text14 black fowe700 text-uppercase\">\n                Game\n              </th>\n              <th scope=\"col\" className=\"text14 black fowe700 text-uppercase\">\n                Platforms\n              </th>\n              <th scope=\"col\" className=\"text14 black fowe700 text-uppercase\">\n                Genre\n              </th>\n              <th scope=\"col\" className=\"text14 black fowe700 text-uppercase\">\n                Number of players\n              </th>\n            </tr>\n            <tbody>\n              {/* <th scope=\"row\" className=\"text12 gray fowe700\">\n                1\n              </th> */}\n\n              {topPlayersGames &&\n                (topPlayersGames.data || []).map((d) => (\n                  <tr>\n                    <td className=\"text14 black fowe700\">{d.game}</td>{\" \"}\n                    <td className=\"text12 gray fowe400\">\n                      {d.platforms.join(\",\")}\n                    </td>\n                    <td className=\"text12 gray fowe400\">{d.genre}</td>{\" \"}\n                    <td className=\"text12 gray fowe400\">{d.totalPlayers}</td>\n                  </tr>\n                ))}\n            </tbody>\n          </table>\n        </div>\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}